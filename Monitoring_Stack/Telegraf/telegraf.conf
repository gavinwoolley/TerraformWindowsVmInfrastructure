[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""

  ## Log at debug level.
   debug = true
  ## Log only error level messages.
  # quiet = false

   logtarget = "file"
   logfile = 'C:\PROGRA~1\telegraf\log.txt'
   logfile_rotation_interval = "7d"
   logfile_rotation_max_size = "10MB"

  hostname = ""
  omit_hostname = false


[[outputs.influxdb]]
   urls = ["http://192.168.17.95:8086"]
   database = "telegraf"

[[inputs.win_perf_counters]]
  [[inputs.win_perf_counters.object]]
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% Processor Time",
      "% DPC Time",
    ]
    Measurement = "win_cpu"
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "LogicalDisk"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "% Free Space",
      "Current Disk Queue Length",
      "% User Time",
      "Free Megabytes",
    ]
    Measurement = "win_disk"

  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Avg. Disk Queue Length",
      "Current Disk Queue Length",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "Avg. Disk sec/Read",
      "Avg. Disk sec/Write",
      "Split IO/sec",
    ]
    Measurement = "win_physdisk"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Network Interface"
    Instances = ["*"]
    Counters = [
      "Bytes Received/sec",
      "Bytes Sent/sec",
      "Packets Received/sec",
      "Packets Sent/sec",
      "Packets Received Discarded",
      "Packets Outbound Discarded",
      "Packets Received Errors",
      "Packets Outbound Errors",
    ]
    Measurement = "win_net"

  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
      "Threads",
      "System Up Time",
      "Processes"
    ]
    Instances = ["------"]
    Measurement = "win_system"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Cache Bytes",
      "Page Reads/sec",
      "Page Writes/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes",
    ]
    Instances = ["------"]
    Measurement = "win_mem"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Process"
    Counters = [
      "% Processor Time",
      "Handle Count",
      "Private Bytes",
      "Thread Count",
      "Virtual Bytes",
      "Working Set",
      "ID Process"
      ]
    Instances = ["*"]
    Measurement = "win_proc"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Paging File"
    Counters = [
      "% Usage",
    ]
    Instances = ["_Total"]
    Measurement = "win_swap"

  [[inputs.exec]]
    commands = [
      'powershell "C:/PROGRA~1/telegraf/DataScripts/processingstats.ps1"'
    ]
    name_override = "processingstats"
    interval = "30s"
    timeout = "100s"
    data_format = "influx"

  [[inputs.exec]]
    commands = [
      'powershell "C:/PROGRA~1/telegraf/DataScripts/sql_query.ps1"'
    ]
    name_override = "sqlquery"
    interval = "20s"
    timeout = "60s"
    data_format = "value"
    data_type = "string"

  [[inputs.exec]]
    commands = [
      'powershell "C:/PROGRA~1/telegraf/DataScripts/log_write_time.ps1"'
    ]
    name_override = "logwrite"
    interval = "20s"
    timeout = "60s"
    data_format = "value"
    data_type = "string"
 
  [[inputs.logparser]]
    files = ["C:\\dev\\git\\env\\Local\\report\\logs\\GZW.log"]
    from_beginning = false
    watch_method = "poll"
    name_override = "app_log"
    
  [inputs.logparser.grok]
    patterns = ['%{GREEDYDATA:logmessage:string}']